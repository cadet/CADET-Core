name: test-coverage

on:
  push:
    branches:
      - test/coverage
    tags:
      - 'v*'         # for version tags
  workflow_dispatch:
    inputs:
      ref:
        description: 'Commit hash, branch name, or tag to run the coverage pipeline for'
        required: false
        default: 'master'
        type: string


jobs:
  coverage:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    defaults:
      run:
        shell: bash -l {0}
    env:
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      BUILD_TYPE: RelWithDebInfo 
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          path: src
          ref: ${{ github.event.inputs.ref || github.ref }}
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt -y install \
            build-essential \
            libhdf5-dev \
            liblapack-dev \
            libblas-dev \
            libtbb-dev \
            libsuperlu-dev \
            libeigen3-dev \
            gcovr;  # for generating code coverage
      - name: Build and Install
        run: |
          cmake -E make_directory "${BUILD_DIR}"
          cmake -E make_directory "${INSTALL_PREFIX}"
          cd "${BUILD_DIR}"
          cmake -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" "${SRC_DIR}" -DENABLE_TESTS=ON -DNUM_MAX_AD_DIRS=160 -DCODE_COVERAGE=ON
          make install -j$(nproc)
      - name: Check executable
        run: |
          export LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:$LD_LIBRARY_PATH
          ${INSTALL_PREFIX}/bin/cadet-cli --version || true
          ${INSTALL_PREFIX}/bin/createLWE
          ${INSTALL_PREFIX}/bin/cadet-cli LWE.h5 || true
      - name: Run CI test set I - bindings
        run: |
          ${BUILD_DIR}/test/testRunner [CI_binding]
      - name: Run CI test set II - sensitivities
        run: |
          ${BUILD_DIR}/test/testRunner [CI_sens1]
          ${BUILD_DIR}/test/testRunner [CI_sens2]
          ${BUILD_DIR}/test/testRunner [CI_sens3]
          ${BUILD_DIR}/test/testRunner [CI_sens4]
          ${BUILD_DIR}/test/testRunner [CI_sens5]
          ${BUILD_DIR}/test/testRunner [CI_sens6]
          ${BUILD_DIR}/test/testRunner [CI_sens7]
          ${BUILD_DIR}/test/testRunner [CI_sens8]
          ${BUILD_DIR}/test/testRunner [CI_sens9]
          ${BUILD_DIR}/test/testRunner [CI_sens11]
          ${BUILD_DIR}/test/testRunner [CI_sens12]
          ${BUILD_DIR}/test/testRunner [CI_sens13]
          ${BUILD_DIR}/test/testRunner [CI_sens14]
          ${BUILD_DIR}/test/testRunner [CI_sens15]
      - name: Run CI test set III - crystallization
        run: |
          ${BUILD_DIR}/test/testRunner [CI_cry1]
          ${BUILD_DIR}/test/testRunner [CI_cry2]
          ${BUILD_DIR}/test/testRunner [CI_cry3]
          ${BUILD_DIR}/test/testRunner [CI_cry4]
          ${BUILD_DIR}/test/testRunner [CI_cry5]
          ${BUILD_DIR}/test/testRunner [CI_cry6]
          ${BUILD_DIR}/test/testRunner [CI_cry7]
          ${BUILD_DIR}/test/testRunner [CI_cry8]
          ${BUILD_DIR}/test/testRunner [CI_cry9]
          ${BUILD_DIR}/test/testRunner [CI_cry10]
          ${BUILD_DIR}/test/testRunner [CI_cry11]
          ${BUILD_DIR}/test/testRunner [CI_cry12]
          ${BUILD_DIR}/test/testRunner [CI_cry13]
          ${BUILD_DIR}/test/testRunner [CI_cry14]
          ${BUILD_DIR}/test/testRunner [CI_cry15]
          ${BUILD_DIR}/test/testRunner [CI_cry16]
          ${BUILD_DIR}/test/testRunner [CI_cry17]
          ${BUILD_DIR}/test/testRunner [CI_cry18]
          ${BUILD_DIR}/test/testRunner [CI_cry19]
          ${BUILD_DIR}/test/testRunner [CI_cry20]
      - name: Run CI test set IV
        run: |
          ${BUILD_DIR}/test/testRunner [CI]

      - name: Generate Coverage Report
        run: |
            gcovr --root "${SRC_DIR}" --filter "${SRC_DIR}" --exclude "ThirdParty" --xml -o coverage.xml
            gcovr --root "${SRC_DIR}" --filter "${SRC_DIR}" --exclude "ThirdParty" --html --html-details -o coverage.html
      
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: cadet/CADET-Core
          files: coverage.xml

