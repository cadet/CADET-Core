name: CI

on:
  push:
    paths-ignore:
      - 'doc/**'
      - 'doc/ISSUE_TEMPLATE'
      - 'doc/PULL_REQUEST_TEMPLATE'
      - '.zenodo.json'
      - 'AUTHORS.md'
      - 'BUILD-LINUX.md'
      - 'BUILD-WINDOWS.md'
      - 'BUILD-OSX.md'
      - 'CITATION.bib'
      - 'CLA.md'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE.txt'
      - 'README.rst'
      - 'SECURITY.md'
      - 'ThirdParty-LICENSES.txt'
      - 'version.txt'
    branches:
      - master
      - dev
  pull_request:
    paths-ignore:
      - 'doc/**'
      - 'doc/ISSUE_TEMPLATE'
      - 'doc/PULL_REQUEST_TEMPLATE'
      - '.zenodo.json'
      - 'AUTHORS.md'
      - 'BUILD-LINUX.md'
      - 'BUILD-WINDOWS.md'
      - 'BUILD-OSX.md'
      - 'CITATION.bib'
      - 'CLA.md'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE.txt'
      - 'README.rst'
      - 'SECURITY.md'
      - 'ThirdParty-LICENSES.txt'
      - 'version.txt'
  workflow_dispatch:
    inputs:
      ref:
        description: 'Commit hash, branch name, or tag to run the CI pipeline for'
        required: false
        default: 'master'
        type: string


jobs:
  Win64:
    runs-on: windows-latest
    strategy:
      fail-fast: true
    env:
      BASE_DIR: ${{ github.workspace }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/cadet
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          path: src
          ref: ${{ github.event.inputs.ref || github.ref }}
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Get MSVC version
        id: get-msvc
        run: |
          $MSVC_VERSION = cl 2>&1 | Select-String -Pattern 'Version (\d\d\.\d\d)' | % { $_.matches.groups[1].Value }
          echo "version=$MSVC_VERSION" >> $Env:GITHUB_OUTPUT
      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git vcpkg
          .\vcpkg\bootstrap-vcpkg.bat
      - name: Install dependencies via vcpkg
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          .\vcpkg\vcpkg install eigen3 hdf5 tbb suitesparse[core]:x64-windows-static mkl:x64-windows-static
          
      - name: Build and Install CADET
        run: |
          cd "${env:BASE_DIR}"
          cmake -E make_directory "${env:BUILD_DIR}"
          cmake -E make_directory "${env:INSTALL_PREFIX}"
          cd "${env:BUILD_DIR}"
          cmake -G "Ninja" ^
            -DCMAKE_TOOLCHAIN_FILE="${env:BASE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake" ^
            -DCMAKE_INSTALL_PREFIX="${env:INSTALL_PREFIX}" ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DENABLE_STATIC_LINK_DEPS=ON ^
            -DENABLE_STATIC_LINK_LAPACK=ON ^
            -DENABLE_TESTS=ON ^
            "${env:SRC_DIR}"
          ninja
          ninja install
      - name: Copy TBB DLL to bin
        run: |
          Copy-Item "${env:BASE_DIR}\vcpkg\installed\x64-windows-static\bin\tbb12.dll" "${env:INSTALL_PREFIX}\bin\"
      - name: Verify installation
        run: |
          cd "${env:INSTALL_PREFIX}\bin"
          .\cadet-cli.exe --version
          .\createLWE.exe
          .\cadet-cli.exe LWE.h5
      - name: Package Artifacts
        run: |
          cd "${env:BASE_DIR}"
          7z a "${env:BASE_DIR}\cadet-${{ runner.os }}.zip" cadet\
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cadet-${{ runner.os }}
          retention-days: 5
          path: ${{ github.workspace }}/cadet-${{ runner.os }}.zip
  Ubuntu-latest:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    defaults:
      run:
        shell: bash -l {0}
    env:
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      BUILD_TYPE: Release
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          path: src
          ref: ${{ github.event.inputs.ref || github.ref }}
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt -y install \
            build-essential \
            libhdf5-dev \
            liblapack-dev \
            libblas-dev \
            libtbb-dev \
            libsuperlu-dev \
            libeigen3-dev;
      - name: Build and Install
        run: |
          cmake -E make_directory "${BUILD_DIR}"
          cmake -E make_directory "${INSTALL_PREFIX}"
          cd "${BUILD_DIR}"
          cmake -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" "${SRC_DIR}" -DENABLE_TESTS=ON -DNUM_MAX_AD_DIRS=160
          make install -j$(nproc)
      - name: Check executable
        run: |
          export LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:$LD_LIBRARY_PATH
          ${INSTALL_PREFIX}/bin/cadet-cli --version || true
          ${INSTALL_PREFIX}/bin/createLWE
          ${INSTALL_PREFIX}/bin/cadet-cli LWE.h5 || true
      - name: Run CI test set I - bindings
        run: |
          ${BUILD_DIR}/test/testRunner [CI_binding]
      - name: Run CI test set II - sensitivities
        run: |
          set -e
          ${BUILD_DIR}/test/testRunner [CI_sens1]
          ${BUILD_DIR}/test/testRunner [CI_sens2]
          ${BUILD_DIR}/test/testRunner [CI_sens3]
          ${BUILD_DIR}/test/testRunner [CI_sens4]
          ${BUILD_DIR}/test/testRunner [CI_sens5]
          ${BUILD_DIR}/test/testRunner [CI_sens6]
          ${BUILD_DIR}/test/testRunner [CI_sens7]
          ${BUILD_DIR}/test/testRunner [CI_sens8]
          ${BUILD_DIR}/test/testRunner [CI_sens9]
          ${BUILD_DIR}/test/testRunner [CI_sens11]
          ${BUILD_DIR}/test/testRunner [CI_sens12]
          ${BUILD_DIR}/test/testRunner [CI_sens13]
          ${BUILD_DIR}/test/testRunner [CI_sens14]
          ${BUILD_DIR}/test/testRunner [CI_sens15]
          ${BUILD_DIR}/test/testRunner [CI_sens16]
          ${BUILD_DIR}/test/testRunner [CI_sens17]
          ${BUILD_DIR}/test/testRunner [CI_sens18]
          ${BUILD_DIR}/test/testRunner [CI_sens19]
          ${BUILD_DIR}/test/testRunner [CI_sens20]
          ${BUILD_DIR}/test/testRunner [CI_sens21]
          ${BUILD_DIR}/test/testRunner [CI_sens22]
          ${BUILD_DIR}/test/testRunner [CI_sens23]
          ${BUILD_DIR}/test/testRunner [CI_sens24]
      - name: Run CI test set III - crystallization
        run: |
          set -e
          ${BUILD_DIR}/test/testRunner [CI_cry1]
          ${BUILD_DIR}/test/testRunner [CI_cry2]
          ${BUILD_DIR}/test/testRunner [CI_cry3]
          ${BUILD_DIR}/test/testRunner [CI_cry4]
          ${BUILD_DIR}/test/testRunner [CI_cry5]
          ${BUILD_DIR}/test/testRunner [CI_cry6]
          ${BUILD_DIR}/test/testRunner [CI_cry7]
          ${BUILD_DIR}/test/testRunner [CI_cry8]
          ${BUILD_DIR}/test/testRunner [CI_cry9]
          ${BUILD_DIR}/test/testRunner [CI_cry10]
          ${BUILD_DIR}/test/testRunner [CI_cry11]
          ${BUILD_DIR}/test/testRunner [CI_cry12]
          ${BUILD_DIR}/test/testRunner [CI_cry13]
          ${BUILD_DIR}/test/testRunner [CI_cry14]
          ${BUILD_DIR}/test/testRunner [CI_cry15]
          ${BUILD_DIR}/test/testRunner [CI_cry16]
          ${BUILD_DIR}/test/testRunner [CI_cry17]
          ${BUILD_DIR}/test/testRunner [CI_cry18]
          ${BUILD_DIR}/test/testRunner [CI_cry19]
          ${BUILD_DIR}/test/testRunner [CI_cry20]
      - name: Run CI test set IV
        run: |
          ${BUILD_DIR}/test/testRunner [CI]
  MacOS:
    runs-on: macos-latest
    strategy:
      fail-fast: true
    defaults:
      run:
        shell: bash -l {0}
    env:
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      BUILD_TYPE: Release
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          path: src
          ref: ${{ github.event.inputs.ref || github.ref }}
      - name: Install Dependencies
        run: |
          brew update > /dev/null || true
          brew install cmake
          brew install hdf5
          brew install tbb
          brew install eigen
      - name: Build and Install
        run: |
          cmake -E make_directory "${BUILD_DIR}"
          cmake -E make_directory "${INSTALL_PREFIX}"
          cd "${BUILD_DIR}"
          cmake -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" "${SRC_DIR}" -DENABLE_TESTS=ON
          make install -j$(sysctl -n hw.logicalcpu)
      - name: Check if it runs
        run: |
          ${INSTALL_PREFIX}/bin/cadet-cli --version || true
          ${INSTALL_PREFIX}/bin/createLWE
          ${INSTALL_PREFIX}/bin/cadet-cli LWE.h5 || true

